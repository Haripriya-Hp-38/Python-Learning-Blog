#train_tabular_classifier.py


import pandas as pd
import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import (
    accuracy_score,
    confusion_matrix,
    classification_report,
)
import seaborn as sns
import matplotlib.pyplot as plt
import joblib


iris = load_iris()
X = pd.DataFrame(iris.data, columns=iris.feature_names)
y = pd.Series(iris.target, name="species")

print("ðŸ”¹ Dataset Loaded Successfully!")
print(X.head(), "\n")


X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)


scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

print("âœ… Data Split and Scaled Successfully!\n")


model = RandomForestClassifier(
    n_estimators=100, max_depth=5, random_state=42
)
model.fit(X_train_scaled, y_train)
print("ðŸŽ¯ Model Training Complete!\n")


y_pred = model.predict(X_test_scaled)

acc = accuracy_score(y_test, y_pred)
cm = confusion_matrix(y_test, y_pred)
cr = classification_report(y_test, y_pred, target_names=iris.target_names)

print(f"âœ… Model Accuracy: {acc * 100:.2f}%\n")
print("ðŸ“‰ Confusion Matrix:\n", cm, "\n")
print("ðŸ“ˆ Classification Report:\n", cr)

plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Greens',
            xticklabels=iris.target_names,
            yticklabels=iris.target_names)
plt.title("Confusion Matrix - Iris Classifier")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()


joblib.dump(model, "iris_classifier.pkl")
print("ðŸ’¾ Model saved as 'iris_classifier.pkl'")
